cast thread

alfredo - rapier or long bow?
long bow can have shield

Cartography reaction...
Cooldowns.py?

Alright - cooldown bug.  Two clocks being used, calling misc's "wait" doesn't work because SmartCombat and Kill.py use a __class__ variable.
Plan: Let Kill keep the variable, but still have misc functions implement the wait.  
Plan: Make a Cooldowns object to implement the waits.  It can "look at" the __class__ variable owned by Cast and Kill...
- So this means that "Go" has less power than "Kill" when it comes to that cooldown.  By "power" I just mean that Kill owns it... which doesn't change much it just is.
Current: SmartCombat doesn't work but kk does because kk uses misc waits.
1. Implement Cooldowns waits
2. Make SmartCombat use them
3. (Cleanup) update kk to change which waits it uses (we don't want 2 sets of waits...)
So Cooldowns is an object I suppose meaning its variables are instance variables... nono we definitely want them singletons (class variables.)  Cooldowns can be instantiated for reaction purposes but some of its variables are class variables.
Take all cooldown variables out of Character (hasting)
Yikes, Command, Kill/Cast, and Cooldowns.  How about Cooldowns is registered all the time and Kill/Cast never get registered and you don't have to make an object.  Bam.  How do the threads die?  They register themselves for different reactions.  Who owns the timers?  Cooldowns, since its registered.
- So Kill and Cast don't have to inherit Command.  Abilities can.  Don't go too crazy with classes, just do it enough for the common code for abilities.  Do up a custom ability object for each ability dynamically once you know the class.  "Command" is cooldown infrastructure.
- (Do abilities hit the global cooldown?  Some hit the attack cooldown, some hit the move cooldown...
- Command can still be used but we need more granularity... CMPT250 all over again
- Does each ability have a class.  Well... there will be an Ability class.  Each ability OBJECT needs a timer(?) Or Cooldowns will code each ability.  That seems simpler!  Let Cooldowns do everything.  Make the objects SmartCombat needs dynamically.  Give them the functions SmartCombat needs (up()).  I think the ability object can have the timer variable because the alternative is too complicated - Cooldowns would need timers ready for EVERY ability.
- On startup, make and toss in the Ability reaction - that will work for human use, and also put it where SmartCombat sees it.  The Ability reaction can kick Cooldowns.move_clock - Cooldowns can be a tramp.  
- To use an ability, do you need access to the object??  Humans just type in the command, and the bot uses SmartCombat. This solves the issue for Kill too - let humans just type the command - no need to make an object each time.  So maybe Kill can handle its own timer???  How about that - trust the human to know the comman and forget the idea about needing to instantiate an object - Let Kill and Cast get tossed in on startup (singletons,) and they'll watch to get their cooldowns, and the wait() can be a static method.!  Yikes, I dunno!!!  The human, and killThread even, don't use the Kill object which is a reaction, they just type into telnet.  Ehh... how about they use a class method so that the cooldown gets set right.
- There will be a class for each ability.  Each class will needs its own timer and possibly wait method, although perhaps something as high as BotReaction can implement a wait method that will work on the subclass's timer.  Making the timer and wait methods class variables allow the human user to access the wait method without having the instance.  Each ability is on the same level as Kill and Cast.  Kill and Cast will have one object registered to maintain the cooldown.  Cooldowns will have class methods to look at these variables, and so will Kill and Cast and each ability.  
- Differentiate the BotReaction wait method (lag) from the class level wait method (cooldown)
- So los-helper will register all this stuff... it could be done by init but that takes away some freedom to make one if you want.  Right now Whois registers/unregisters itself when you hit execute.  This is fine because it's a one-shot.  Other command will be registered by los-helper (never to be unregistered, while whois and info get unregistered.)
los-helper:
kill = Kill(self.mudReaderHandler, self.telnetHandler)
self.mudReaderHandler.register_reaction(kill)
Kill.execute_blocking("dustman")  # The reaction has to hit a class variable
 # So we can't inherit the flag so we can't use BotReactionWithFlag
Kill.wait_for_flags
How about a singleton where the object is a class variable
import globalPackage
veryGlobalReachingClass: def __init__(self):
self.inventory = globalPackage.veryGlobalReachingClassObject

Maybe there gets to be 2 threads because the 1st doesn't die... it gets its target changed, and another gets made... Try printing when combatThreads die

(That shopping thing is annoying (auto-inventory when something's bought).

SmartCombat.target... moved out of the init arglist... stays an object variable... how about a class variable??
- need the ability to change target
- stop() can be a class method
- there will be one instance in the reaction list
- we won't need to keep track of the thread object since it'll just read class variables
- - though we do need is_alive() right?  Ummm... make the thread a class variable?  Ok...
- - - so the thread is no longer an instance of the class, so that helps, this isn't the same situation as discussed with Adam
- - - Why again?  So we know whether or not to make a new thread, and so we don't have to lug bunch of threads around
- - - What about Abilities... didn't I have a work around?  The Kill class can provide start() and stop() methods to control the thread, and the thread can be a class variable... along with the timers... why does this feel incomplete... I think I hadn't thought this far ahead before... Actually, SmartCombat doesn't use a kill thread - maybe that's why.  So this might be sort of unnecessary at the Kill level... or not(?) SmartCombat is supposed to provide everything we need, including kill_without_magic() which may as well be implemented by the new Kill class... yikes...
So, umm, target is a class variable, and that works across Kill, Cast, and all Abilities, and SmartCombat.
And what about keep_going()?  (Called for when target changes...)  Does it work as a class method?
- stopping (class variable) = False (may have been set True by monster death)
- the thread continues once the sleep ends (no need to access thread object)
- Yes
Where does the thread object live?
- I think we never access it... ummm... no we have to by the class methods offered by Kill or SmartCombat...
- so it's a class variable.
Is there already a parent to Kill/Cast/SmartCombat/Ability alike??  Seems we just ironed 3 of its variables.
- Yes - CombatThread.
- This has to be rewritten so as not to inherit Thread but have one as a class variable.  This is better because the thread object only running once causes a problem of having to remake the object which I hate.
- So CombatThread -> CombatObject
- target
- keep_going()
- stopping
- stop()
- thread (possibly _thread but nah)
- engage(target)
And what about how SmartCombat uses Kill and Cast?
- It won't use any of the thread stuff offered for its combat algorithm, it'll do it "manually"
- It'll call kill.
- It'll have a list everything it needs, this is where Abilities live primarily (secondarily in the reaction list)
- Then SmartCombat will interface everything the bot needs (use_heal_abilities or implement heal_up and combat_heal) and also the human* so that we can do this shit without making new objects
- *The human doesn't need any Ability objects but does look at Ability class variables to check cooldowns (Haste.up() must be a class variable)... Command.py does this stuff...
Does this mean 
class Kill(Command, CombatObject): ??? Ummmm I think so
- up()
- clock
- execute_and_block_serious()
- target
- stopping
- thread
class Cast(Command, CombatObject):
- up()
- clock
- execute_and_block_serious()
- target
- stopping
- thread
class Ability(Command):
-up()
-clock
-execute_and_block_serious()
-(we don't need to add thread support to Ability)
class SmartCombat(CombatObject):
-target
-stopping
-thread
-kill
-cast
-ability_list
Seems pretty good... :) I guess, I hope it works.  I'll trust my analysing abilties I guess, I can't hold this all in my head at once.
Implementation order??
1. Make smartCombat a bot-held object and have it control its thread... write CombatObject which does not inherit threading
2. Make smartCombat use Kill and Cast in the way described above (rewrite them)
3. Implement threads on the Kill and Cast classes
4. Get rid of all old threading strategies
5. See if Circle works
6. Write a rest() and combat_heal() functions for SmartCombat

Uhh so I suppose the plan is to be able to send a kill command without telnetHandler...
It works in theory but it might make more work for the human side...
Make it global or a class variable??  
Not use the Kill object at all?
Send 'kill' in telnet and just let the Kill object know?
- This seems like a better option than a global telnet handler.
Make a new Kill object to do it each time?
- requires putting in the telnet handler... annoying

... will need to move class Ability into Ability.py

I think that CommandHandler will 'have' all of the command objects
 - kill, cast, aura, go, 
 BotThread needs blocking calls.
 Adam said that CommandHandler should be a hub so that human and bot call the same functions.
 I think that they're too different because of the threading differences.
 Right now, botThread is polluted with flag waits - it's a gongshow to get anything done
 - resting, casting show aura, checking gear, whois, info - all take the entire program to do.
 The Command tools are good - they provide the blocking/handshaking BotThread needs.
 Making CommandHandler functions that both the human and bot use is just extra useless code.
 In general - let CommandHandler own every command.  Let BotThread do self.commandHandler.kill.send(target)
 etc.  That way, BotThread can still have its head in the clouds and CommandHandler doesn't become a messy hub.
 Also, BotThread doesn't have to collect every command (in addition to them being collected elsewhere for human use.)

     @classmethod
    def engage(cls, telnetHandler, target=None):
        magentaprint("CombatObject: engage" + str(cls))
        magentaprint("telnetHandler: " + str(telnetHandler))

        if target:
            cls.target = target  
            # Unnecessary?? Golly, things are getting hairy.
            # I somewhat prefer not using the class variable.
            # I think because of how Command works for non CombatObjects.
            # And it turns out I can pass it along as an argument over and over.
            # The only question is how to change targets.
            # I think now joins and starts a new thread and doesn't use the class variable.
            # Neato.  If it works.

        if cls.thread != None:
            magentaprint("cls.thread " + str(cls.thread))
            # cls.thread.join()  # Can't join because we want this call not to hang
            # Stop the old thread, start the new thread.
            # (This will work even if engage is called multiple times without spawning too many threads.)
            # (You might temporarily get extra threads but they'll be 'stopped')
            # Ack... 'stopping' is a class variable... gack!
            # ... ok, what about just using the class target variable as originally designed even if I don't like it.
            # It can be put into 'send' as an argument but CombatObject will have it as a class variable.
            # So CombatObject.run uses CombatObject.target.
            # I could later rewrite AGAIN to not use class variables...
            # - I believe I overreacted... dependency injection isn't so bad if you add layers. 
            #   (smartCombat owning kill.)

            